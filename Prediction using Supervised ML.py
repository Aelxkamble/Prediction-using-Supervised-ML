# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AU8yL7h34q2KjpE4L9cswEJB6DiGGzZT

<h1><b>Task 1: Prediction using Supervised ML</b></h1>

<h2><b>Predict the percentage of an student based on the no. of study hours.</b></h2>

<h1><b>Name: BALAJI KAMBLE</b></h1>

**Importing necessay libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""Loading data in DataFrame

"""

df = pd.read_csv("http://bit.ly/w-data")
df.head()

df.info()

df.describe()

"""Boxplot of our data"""

sns.boxplot(data=df[["Hours","Scores"]])

"""Clearly there are no outliers in our data

Scatterplot of our data
"""

df.plot.scatter(x="Hours",y="Scores")
plt.title("Hours vs. Scores")
plt.grid()
plt.show()

"""Clearly we can see that there is positive linear relationship between hours and scores

Preparing the data
"""

X = df.iloc[:, :-1].values
y = df.iloc[:, 1].values

"""Splitting our Dataset into Train and Test"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                    test_size = 0.20, random_state = 0)

"""Here we are using 80% of our dataset for training and 20% of the data for testing.

Training the Algorithm

Now we use the training data to train our Algorithm
"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

line = regressor.coef_*X+regressor.intercept_

df.plot.scatter(x="Hours",y="Scores")
plt.plot(X, line);
plt.grid()
plt.show()

"""Let's make some Predictions"""

# Here we predict the scores 
y_pred = regressor.predict(X_test)
print(y_pred)

"""Comparing Actual Score vs. Predicted Score"""

df_compare = pd.DataFrame({"Actual Score":y_test,"Predicted Score":y_pred})
df_compare

"""Here we are needed to predict the score if a student studies for 9.25 hrs/ day"""

my_hours = np.array([[9.25]])
my_pred = regressor.predict(my_hours)
print("No of Hours = {}".format(my_hours[0][0]))
print("Predicted Score = {}".format(my_pred[0]))

"""Evaluating the Model"""

import sklearn.metrics as metrics

explained_variance=metrics.explained_variance_score(y_test, y_pred)
mean_absolute_error=metrics.mean_absolute_error(y_test, y_pred) 
mse=metrics.mean_squared_error(y_test, y_pred) 
mean_squared_log_error=metrics.mean_squared_log_error(y_test, y_pred)
median_absolute_error=metrics.median_absolute_error(y_test, y_pred)
r2=metrics.r2_score(y_test, y_pred)

print('Explained Variance: ', round(explained_variance,4))    
print('mean_squared_log_error: ', round(mean_squared_log_error,4))
print('r2: ', round(r2,4))
print('MAE: ', round(mean_absolute_error,4))
print('MSE: ', round(mse,4))
print('RMSE: ', round(np.sqrt(mse),4))